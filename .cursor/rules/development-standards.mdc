---
description: General development standards for the entire project
globs: "**/*"
alwaysApply: true
---

# Development Standards

These standards apply to all code in the e-commerce platform, regardless of specific module or technology.

## Code Style & Formatting

1. **Linting & Formatting**:
   - Use ESLint with TypeScript rules for all TS/JS code
   - Use Prettier for consistent formatting
   - Run linting pre-commit via Husky

2. **Naming Conventions**:
   - PascalCase for classes, interfaces, types, and React components
   - camelCase for variables, functions, and methods
   - UPPER_SNAKE_CASE for constants
   - kebab-case for file names and URLs

3. **File Structure**:
   - One primary class/component per file
   - Group related files in directories
   - Keep files under 300 lines when possible

## Coding Practices

1. **TypeScript**:
   - Enable strict mode in all TypeScript projects
   - Explicitly type function parameters and return values
   - Use interfaces for object shapes, especially in APIs
   - Avoid `any` type; use `unknown` with type guards instead

2. **Error Handling**:
   - Use custom error classes for different error types
   - Always handle errors gracefully at boundaries
   - Log errors with context information
   - Never expose stack traces to users

3. **Comments & Documentation**:
   - Use JSDoc for public APIs and interfaces
   - Write self-documenting code with clear names
   - Include comments for complex logic or business rules
   - Keep comments up to date when code changes

## Testing Standards

1. **Test Coverage**:
   - Aim for 80%+ test coverage for critical paths
   - 100% test coverage for shared utilities
   - Test edge cases and error paths

2. **Test Types**:
   - Unit tests for pure logic and components
   - Integration tests for API endpoints
   - E2E tests for critical user flows

3. **Test Organization**:
   - Co-locate tests with implementation files
   - Name test files with `.test.ts` or `.spec.ts` suffix
   - Use descriptive test names that explain behavior

## Security Practices

1. **Input Validation**:
   - Validate all input at API boundaries
   - Use schema validation (zod, class-validator) for DTOs
   - Sanitize data before display to prevent XSS

2. **Authentication & Authorization**:
   - Always check permissions before any sensitive operation
   - Use short-lived tokens with refresh mechanism
   - Implement proper CSRF protection

3. **Dependency Management**:
   - Keep dependencies up to date
   - Regularly run security audits
   - Pin dependency versions for reproducible builds

## Performance Considerations

1. **Frontend**:
   - Optimize bundle size (code splitting, tree shaking)
   - Minimize render cycles and component rerenders
   - Optimize images and static assets

2. **Backend**:
   - Use pagination for large data sets
   - Index database fields used in queries
   - Cache expensive operations

3. **General**:
   - Profile before optimizing
   - Document performance requirements
   - Set up monitoring for performance metrics

These standards provide a foundation for high-quality, maintainable code across the entire project.