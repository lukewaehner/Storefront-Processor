name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 0 * * 0" # Weekly run on Sundays at midnight

# Add permissions needed for CodeQL
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Run ESLint
        run: npm run lint
        working-directory: ./backend
        continue-on-error: true # Don't fail the build for linting errors initially

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Run unit tests
        run: npm test -- --coverage
        working-directory: ./backend

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Build backend
        run: npm run build
        working-directory: ./backend

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            backend/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./infrastructure/docker/backend.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/storefront-processor:${{ env.BRANCH_NAME }}
            ghcr.io/${{ github.repository_owner }}/storefront-processor:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache-dependency-path: backend/package-lock.json

      - name: Run npm audit
        run: npm audit
        working-directory: ./backend
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json

      - name: Setup CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  notify:
    name: Send Notifications
    needs: [lint, test, build, security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Notify on Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_TITLE: "CI Pipeline Completed Successfully"
          SLACK_MESSAGE: "The CI pipeline for ${{ github.repository }} has completed successfully"

      - name: Notify on Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: "CI Pipeline Failed"
          SLACK_MESSAGE: "The CI pipeline for ${{ github.repository }} has failed"
