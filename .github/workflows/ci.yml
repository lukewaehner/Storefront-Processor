name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 0 * * 0" # Weekly run on Sundays at midnight

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend] # Remove frontend until it's set up
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        run: cd ${{ matrix.component }} && npm ci

      - name: Run ESLint
        run: cd ${{ matrix.component }} && npm run lint
        continue-on-error: true # Temporarily allow lint errors to not fail the build

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres_test
          POSTGRES_PASSWORD: test_changeme
          POSTGRES_DB: storefront_test
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        component: [backend] # Only backend has tests for now
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        run: cd ${{ matrix.component }} && npm ci

      - name: Create test env file
        run: |
          cd ${{ matrix.component }}
          cat << EOF > .env.test
          NODE_ENV=test

          # Test Database Configuration
          POSTGRES_TEST_USER=postgres_test
          POSTGRES_TEST_PASSWORD=test_changeme
          POSTGRES_TEST_DB=storefront_test
          POSTGRES_TEST_HOST=localhost
          POSTGRES_TEST_PORT=5433

          DATABASE_URL=postgresql://postgres_test:test_changeme@localhost:5433/storefront_test

          # Other test-specific settings
          JWT_SECRET=test_jwt_secret
          JWT_EXPIRES_IN=1h

          # Redis
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_URL=redis://localhost:6379

          BACKEND_PORT=4001
          EOF

      - name: Run prisma generate
        run: cd ${{ matrix.component }} && npx prisma generate

      - name: Run unit tests
        run: cd ${{ matrix.component }} && npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres_test:test_changeme@localhost:5433/storefront_test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend] # Remove frontend until it's set up
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        run: cd ${{ matrix.component }} && npm ci

      - name: Build
        run: cd ${{ matrix.component }} && npm run build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.component == 'frontend' && 'frontend/.next' || 'backend/dist' }}
          key: ${{ runner.os }}-build-${{ matrix.component }}-${{ github.sha }}

  docker:
    name: Build and Push Docker Images
    permissions:
      contents: read
      packages: write # Add permission to push to GHCR
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        component: [backend] # Remove frontend until it's set up
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/${{ matrix.component }}.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/storefront-processor-${{ matrix.component }}:${{ env.BRANCH_NAME }}
            ghcr.io/${{ github.repository_owner }}/storefront-processor-${{ matrix.component }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend] # Remove frontend until it's set up
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        run: cd ${{ matrix.component }} && npm ci

      - name: Run npm audit
        run: cd ${{ matrix.component }} && npm audit --production
        continue-on-error: true # Temporarily allow audit errors to not fail the build

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high --file=${{ matrix.component }}/package.json

  # Simplified CodeQL job that uses the default token and repository context
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      # Required for CodeQL analysis
      security-events: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        # Using default GITHUB_TOKEN and no custom repository settings

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  notify:
    name: Send Notifications
    needs: [lint, test, build, docker, security, codeql]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Notify on Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_TITLE: "CI Pipeline Completed Successfully"
          SLACK_MESSAGE: "The CI pipeline for ${{ github.repository }} has completed successfully"

      - name: Notify on Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: "CI Pipeline Failed"
          SLACK_MESSAGE: "The CI pipeline for ${{ github.repository }} has failed"
