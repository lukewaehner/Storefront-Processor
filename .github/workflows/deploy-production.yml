name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "deploy-production" to confirm deployment'
        required: true
  push:
    tags:
      - "v*"

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Check Tag or Confirmation
        id: validate
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.confirm }}" != "deploy-production" ]]; then
            echo "Deployment confirmation text did not match. Expected 'deploy-production'."
            exit 1
          fi

          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Deploying from tag: ${{ github.ref }}"
          else
            echo "Deploying from manual trigger"
          fi

  build:
    name: Build Production Artifacts
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        run: cd ${{ matrix.component }} && npm ci

      - name: Build
        run: cd ${{ matrix.component }} && npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-build
          path: |
            ${{ matrix.component == 'frontend' && 'frontend/.next' || 'backend/dist' }}
            ${{ matrix.component }}/package.json
            ${{ matrix.component }}/package-lock.json
            ${{ matrix.component == 'backend' && 'backend/prisma' || '' }}

  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Prepare deployment files
        run: |
          # Create a temporary deployment directory
          mkdir -p deploy

          # Copy build artifacts to deployment directory
          cp -r artifacts/backend-build/* deploy/backend/
          cp -r artifacts/frontend-build/* deploy/frontend/

          # Copy deployment scripts
          cp infrastructure/deploy/production/* deploy/
          chmod +x deploy/*.sh

      - name: Transfer files to production server
        run: |
          # Create a compressed archive
          tar -czf deploy.tar.gz -C deploy .

          # Transfer to server
          scp deploy.tar.gz ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_IP }}:/tmp/

      - name: Execute deployment script
        run: |
          ssh ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} "
            mkdir -p ~/deployment
            tar -xzf /tmp/deploy.tar.gz -C ~/deployment
            cd ~/deployment
            ./deploy.sh
          "

  notify:
    name: Send Deployment Notifications
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on Success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_TITLE: "Production Deployment Successful"
          SLACK_MESSAGE: "The application has been successfully deployed to production."

      - name: Notify on Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: "Production Deployment Failed"
          SLACK_MESSAGE: "The production deployment has failed. Please check the GitHub Actions logs."
