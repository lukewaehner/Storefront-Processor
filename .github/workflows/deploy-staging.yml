name: Deploy to Staging

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        working-directory: ./infrastructure/terraform/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform/staging
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform/staging
        run: terraform apply -auto-approve tfplan

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster storefront-staging --service storefront-api --force-new-deployment
          aws ecs update-service --cluster storefront-staging --service storefront-frontend --force-new-deployment

      - name: Verify Deployment
        run: |
          echo "Waiting for services to stabilize..."
          aws ecs wait services-stable --cluster storefront-staging --services storefront-api storefront-frontend

      - name: Run Health Checks
        run: |
          HEALTH_CHECK_URL="https://api-staging.storefront-processor.com/health"
          RETRIES=5
          DELAY=10

          for i in $(seq 1 $RETRIES); do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
            if [ $HTTP_STATUS -eq 200 ]; then
              echo "Health check passed!"
              exit 0
            else
              echo "Health check failed with status $HTTP_STATUS. Retry $i of $RETRIES..."
              sleep $DELAY
            fi
          done

          echo "Health check failed after $RETRIES attempts"
          exit 1

      - name: Notify Deployment Status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Staging Deployment ${{ (job.status == 'success') && 'Completed' || 'Failed' }}"
          SLACK_MESSAGE: "Deployment to staging environment has ${{ (job.status == 'success') && 'completed successfully' || 'failed' }}"
